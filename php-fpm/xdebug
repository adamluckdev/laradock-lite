#! /bin/bash

xdebug_status ()
{
    echo 'xDebug status'
    docker exec -it $PHP_FPM_CONTAINER bash -c 'php -m | grep xdebug'
}


xdebug_start ()
{
    echo 'Start xDebug'

    # And uncomment line with xdebug extension, thus enabling it
    ON_CMD="sed -i 's/^;zend_extension=/zend_extension=/g' \
                    /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"

    docker exec -it $PHP_FPM_CONTAINER bash -c "${ON_CMD}"
    docker restart $PHP_FPM_CONTAINER
    xdebug_status
}


xdebug_stop ()
{
    echo 'Stop xDebug'

    # Comment out xdebug extension line
    OFF_CMD="sed -i 's/^zend_extension=/;zend_extension=/g' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"

    docker exec -it $PHP_FPM_CONTAINER bash -c "${OFF_CMD}"
    # docker-compose restart php-fpm
    docker restart $PHP_FPM_CONTAINER
    xdebug_status
}

help()
{
    echo "xDebug [Stop | Start | Status] in the php-fpm container."
    echo "Usage:"
    echo "  .php-fpm/xdebug stop|start|status 81|82|83"
}

if [ -z ${1+x} ] || [ -z ${2+x} ]; then
  help
  exit 1
fi

PHP_FPM_CONTAINER=$(docker ps | grep php${2}-fpm | awk '{print $1}')

if [ -z "${PHP_FPM_CONTAINER}" ]; then
  echo "Running container for PHP version ${2} was not found"
  exit 1
fi

case $1 in
    stop|STOP)
        xdebug_stop
        ;;
    start|START)
        xdebug_start
        ;;
    status|STATUS)
        xdebug_status
        ;;
    *)
        help
esac

exit 1
